buildscript {
    repositories {
        maven {
            url "https://repo1.maven.org/maven2" 
        }
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
    }
}

plugins {
    id 'java-library'
}

apply plugin: 'forge'

// ext.build = System.getenv().BUILD_NUMBER ?: 'git'
ext.modversion = "${project.version_major}.${project.version_minor}.${project.version_micro}"

group = project.group
version = "${project.version_minecraft}-${modversion}"
compileJava.options.encoding = 'UTF-8'
compileApiJava.options.encoding = 'UTF-8'

idea {
    module {
        downloadSources = true
        inheritOutputDirs = true
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    shade
    compile.extendsFrom shade
}

minecraft {
    srgExtra "PK: org/apache/http/entity/mime com/maximuslotro/mc/signpic/lib/org/apache/http/entity/mime"
    srgExtra "PK: org/apache/http/entity/mime/content com/maximuslotro/mc/signpic/lib/org/apache/http/entity/mime/content"

    version = "${project.version_minecraft}-${project.version_forge}"
    
    replaceIn 'Reference.java'
    replace '${modid}', project.modid
    replace '${modname}', project.modname
    replace '${version}', modversion
    replace '${mcversion}', project.version_minecraft
    replace '${forgeversion}', project.version_forge
}

sourceSets {
    api {
        java {
            srcDir "BnnWidget/src/api/java"
        }
        resources {
            srcDir "BnnWidget/src/api/resources"
        }
    }
}
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand([
                'modid'          : project.modid,
                'modname'        : project.modname,
                'version'        : modversion,
                'mcversion'      : project.version_minecraft,
                'forgeversion'   : project.version_forge,
                'minforgeversion': project.hasProperty('version_minforge') ? project.version_minforge : project.version_forge,
        ])
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


dependencies {
	shade('org.apache.httpcomponents:httpmime:4.3.3'){transitive=false}
}

def commonManifest = { 
}

jar {
    from sourceSets.api.output
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    manifest commonManifest
}

